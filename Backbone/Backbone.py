import torch.nn as nn
from Block.CBL import *

class Backbone(nn.Module):
    def __init__(self):
        super(Backbone, self).__init__()
        self.backbone = nn.Sequential(
            # 输入 (448, 448, 3)
            CBL(3, 64, 7, 2, 3),  # (224, 224, 64)
            nn.MaxPool2d(2, 2),  # (112, 112, 64)
            
            CBL(64, 192, 3, 1, 1),   # (112, 112, 192)
            nn.MaxPool2d(2, 2),  # (56, 56, 192)
            
            CBL(192, 128, 1, 1, 0), # (56, 56, 128)
            CBL(128, 256, 3, 1, 1), # (56, 56, 256)
            CBL(256, 256, 1, 1, 0), # (56, 56, 256)
            CBL(256, 512, 3, 1, 1), # (56, 56, 512)
            nn.MaxPool2d(2, 2), # (28, 28, 512)
            
            CBL(512, 256, 1, 1, 0), # (28, 28, 256)
            CBL(256, 512, 3, 1, 1), # (28, 28, 512) ,重复4次
            CBL(512, 256, 1, 1, 0),
            CBL(256, 512, 3, 1, 1),
            CBL(512, 256, 1, 1, 0),
            CBL(256, 512, 3, 1, 1),
            CBL(512, 256, 1, 1, 0),
            CBL(256, 512, 3, 1, 1), # (28, 28, 512)
            CBL(512, 512, 1, 1, 0), # (28, 28, 512)
            CBL(512, 1024, 3, 1, 1), # (28, 28, 1024)
            nn.MaxPool2d(2, 2), # (14, 14, 1024)

            CBL(1024, 512, 1, 1, 0),  # 重复两次
            CBL(512, 1024, 3, 1, 1), 
            CBL(1024, 512, 1, 1, 0),
            CBL(512, 1024, 3, 1, 1), # (14, 14, 1024)
            CBL(1024, 1024, 3, 1, 1), # (14, 14, 1024)
            CBL(1024, 1024, 3, 2, 1), # (7, 7, 1024)
        )

    def forward(self, x):
        x = self.backbone(x)
        return x
